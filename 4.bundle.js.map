{"version":3,"sources":["webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/workerManager.js","webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/tokenization.js","webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/jsonMode.js","webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","webpack:///../ram-shapes.github.io-source/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js"],"names":["Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","Diagnostic","Command","TextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","__webpack_require__","d","__webpack_exports__","MarkupKind","CompletionItemKind","InsertTextFormat","CompletionItem","SymbolKind","TextDocument","create","line","character","is","value","candidate","Is","objectLiteral","number","one","two","three","four","start","end","Error","uri","range","defined","string","undefined","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","color","label","textEdit","additionalTextEdits","typedArray","startLine","endLine","startCharacter","endCharacter","kind","result","location","message","Warning","Information","Hint","severity","code","source","relatedInformation","title","command","args","_i","arguments","length","replace","newText","insert","position","del","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","options","overwrite","ignoreIfExists","boolean","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","every","change","TextDocumentIdentifier","TextDocumentItem","MarkupContent","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolInformation","TextEditChangeImpl","this","prototype","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_this","_textEditChanges","Object","_workspaceEdit","forEach","textEditChange","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","textDocumentEdit","createFile","checkDocumentChanges","renameFile","deleteFile","version","languageId","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","String","Number","Boolean","Key","Null","name","containerName","CodeActionKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentSymbol","detail","selectionRange","children","deprecated","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","diagnostics","only","commandOrEdit","data","tabSize","insertSpaces","DocumentLink","target","TextDocumentSaveReason","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","compare","p","left","slice","right","leftIdx","rightIdx","i","ret","a","b","diff","lastModifiedOffset","e","startOffset","endOffset","substring","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check","WorkerManager","defaults","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","dispose","_client","clearInterval","Date","now","_getClient","monaco","editor","createWebWorker","moduleId","createData","languageSettings","diagnosticsOptions","enableSchemaRequest","getProxy","getLanguageServiceWorker","resources","then","client","_","withSyncedResources","Uri","DiagnosticsAdapter","_disposables","_listener","onModelAdd","model","handle","modeId","getModeId","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","getModels","resource","worker","resetSchema","doValidation","markers","map","diag","toSeverity","startLineNumber","startColumn","endLineNumber","endColumn","getModel","err","console","error","lsSeverity","main","MarkerSeverity","Info","fromPosition","column","lineNumber","fromRange","toRange","toCompletionItemKind","mItemKind","languages","toTextEdit","languageFeatures_CompletionAdapter","CompletionAdapter","provideCompletionItems","context","token","doComplete","info","wordInfo","getWordUntilPosition","wordRange","entry","item","insertText","sortText","filterText","insertTextFormat","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","suggestions","toMarkdownString","thing","toMarkedStringArray","HoverAdapter","provideHover","doHover","toSymbolKind","mKind","DocumentSymbolAdapter","provideDocumentSymbols","findDocumentSymbols","fromFormattingOptions","DocumentFormattingEditProvider","provideDocumentFormattingEdits","format","DocumentRangeFormattingEditProvider","provideDocumentRangeFormattingEdits","DocumentColorAdapter","provideDocumentColors","findDocumentColors","infos","provideColorPresentations","getColorPresentations","presentations","presentation","FoldingRangeAdapter","provideFoldingRanges","ranges","Comment","Imports","Region","toFoldingRangeKind","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","comments","numberOfInsertedCharacters","adjustOffset","scanError","scanner","jsonc_parser_main","lastWasColon","tokens","endState","clone","getPosition","type","scan","substr","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_PROPERTY_NAME","TOKEN_VALUE_NUMBER","TOKEN_COMMENT_LINE","TOKEN_COMMENT_BLOCK","getStateData","getTokenError","startIndex","scopes","_state","equals","other","setStateData","setupMode","disposables","uris","apply","registerCompletionItemProvider","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","setLanguageConfiguration","richEditConfiguration","registerColorProvider","registerFoldingRangeProvider","wordPattern","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","createScanner","ignoreTrivia","pos","len","tokenOffset","scanHexDigits","count","exact","digits","charCodeAt","scanNext","isWhiteSpace","fromCharCode","isLineBreak","ch_1","scanString","safeLength","commentClosed","isDigit","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getToken","getTokenValue","getTokenOffset","getTokenLength","documentText","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","isEOL","nChars","computeIndentLevel","indentValue","eol","getEOL","lineBreak","indentLevel","repeat","hasError","newLineAndIndent","editOperations","addEdit","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","s","indexOf","ParseOptions","visit","visitor","DEFAULT","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","arg","onObjectBegin","onObjectProperty","onObjectEnd","onArrayBegin","onArrayEnd","onLiteralValue","onSeparator","onComment","onError","disallowComments","allowTrailingComma","handleError","skipUntilAfter","skipUntil","parseString","isValue","parseValue","needsComma","parseArray","parseObject","JSON","parse","parseLiteral","main_createScanner","main_parse","main_findNodeAtOffset","main_getNodePath","main_getNodeValue","main_format","errors","currentProperty","currentParent","previousParents","onValue","object","pop","array","findNodeAtOffset","node","includeRightBound","contains","getNodePath","parent","path","index","getNodeValue","obj","_a","prop","valueNode"],"mappings":"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","file":"4.bundle.js","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\n/**\r\n * The Position namespace provides helper functions to work with\r\n * [Position](#Position) literals.\r\n */\r\nexport var Position;\r\n(function (Position) {\r\n    /**\r\n     * Creates a new Position literal from the given line and character.\r\n     * @param line The position's line.\r\n     * @param character The position's character.\r\n     */\r\n    function create(line, character) {\r\n        return { line: line, character: character };\r\n    }\r\n    Position.create = create;\r\n    /**\r\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\r\n    }\r\n    Position.is = is;\r\n})(Position || (Position = {}));\r\n/**\r\n * The Range namespace provides helper functions to work with\r\n * [Range](#Range) literals.\r\n */\r\nexport var Range;\r\n(function (Range) {\r\n    function create(one, two, three, four) {\r\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\r\n            return { start: Position.create(one, two), end: Position.create(three, four) };\r\n        }\r\n        else if (Position.is(one) && Position.is(two)) {\r\n            return { start: one, end: two };\r\n        }\r\n        else {\r\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\r\n        }\r\n    }\r\n    Range.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\r\n    }\r\n    Range.is = is;\r\n})(Range || (Range = {}));\r\n/**\r\n * The Location namespace provides helper functions to work with\r\n * [Location](#Location) literals.\r\n */\r\nexport var Location;\r\n(function (Location) {\r\n    /**\r\n     * Creates a Location literal.\r\n     * @param uri The location's uri.\r\n     * @param range The location's range.\r\n     */\r\n    function create(uri, range) {\r\n        return { uri: uri, range: range };\r\n    }\r\n    Location.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\r\n    }\r\n    Location.is = is;\r\n})(Location || (Location = {}));\r\n/**\r\n * The LocationLink namespace provides helper functions to work with\r\n * [LocationLink](#LocationLink) literals.\r\n */\r\nexport var LocationLink;\r\n(function (LocationLink) {\r\n    /**\r\n     * Creates a LocationLink literal.\r\n     * @param targetUri The definition's uri.\r\n     * @param targetRange The full range of the definition.\r\n     * @param targetSelectionRange The span of the symbol definition at the target.\r\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\r\n     */\r\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\r\n        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };\r\n    }\r\n    LocationLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [LocationLink](#LocationLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\r\n            && (Range.is(candidate.targetSelectionRange) || Is.undefined(candidate.targetSelectionRange))\r\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\r\n    }\r\n    LocationLink.is = is;\r\n})(LocationLink || (LocationLink = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [Color](#Color) literals.\r\n */\r\nexport var Color;\r\n(function (Color) {\r\n    /**\r\n     * Creates a new Color literal.\r\n     */\r\n    function create(red, green, blue, alpha) {\r\n        return {\r\n            red: red,\r\n            green: green,\r\n            blue: blue,\r\n            alpha: alpha,\r\n        };\r\n    }\r\n    Color.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.red)\r\n            && Is.number(candidate.green)\r\n            && Is.number(candidate.blue)\r\n            && Is.number(candidate.alpha);\r\n    }\r\n    Color.is = is;\r\n})(Color || (Color = {}));\r\n/**\r\n * The ColorInformation namespace provides helper functions to work with\r\n * [ColorInformation](#ColorInformation) literals.\r\n */\r\nexport var ColorInformation;\r\n(function (ColorInformation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(range, color) {\r\n        return {\r\n            range: range,\r\n            color: color,\r\n        };\r\n    }\r\n    ColorInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Range.is(candidate.range) && Color.is(candidate.color);\r\n    }\r\n    ColorInformation.is = is;\r\n})(ColorInformation || (ColorInformation = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [ColorPresentation](#ColorPresentation) literals.\r\n */\r\nexport var ColorPresentation;\r\n(function (ColorPresentation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(label, textEdit, additionalTextEdits) {\r\n        return {\r\n            label: label,\r\n            textEdit: textEdit,\r\n            additionalTextEdits: additionalTextEdits,\r\n        };\r\n    }\r\n    ColorPresentation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate.label)\r\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\r\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\r\n    }\r\n    ColorPresentation.is = is;\r\n})(ColorPresentation || (ColorPresentation = {}));\r\n/**\r\n * Enum of known range kinds\r\n */\r\nexport var FoldingRangeKind;\r\n(function (FoldingRangeKind) {\r\n    /**\r\n     * Folding range for a comment\r\n     */\r\n    FoldingRangeKind[\"Comment\"] = \"comment\";\r\n    /**\r\n     * Folding range for a imports or includes\r\n     */\r\n    FoldingRangeKind[\"Imports\"] = \"imports\";\r\n    /**\r\n     * Folding range for a region (e.g. `#region`)\r\n     */\r\n    FoldingRangeKind[\"Region\"] = \"region\";\r\n})(FoldingRangeKind || (FoldingRangeKind = {}));\r\n/**\r\n * The folding range namespace provides helper functions to work with\r\n * [FoldingRange](#FoldingRange) literals.\r\n */\r\nexport var FoldingRange;\r\n(function (FoldingRange) {\r\n    /**\r\n     * Creates a new FoldingRange literal.\r\n     */\r\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\r\n        var result = {\r\n            startLine: startLine,\r\n            endLine: endLine\r\n        };\r\n        if (Is.defined(startCharacter)) {\r\n            result.startCharacter = startCharacter;\r\n        }\r\n        if (Is.defined(endCharacter)) {\r\n            result.endCharacter = endCharacter;\r\n        }\r\n        if (Is.defined(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    FoldingRange.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\r\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\r\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\r\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\r\n    }\r\n    FoldingRange.is = is;\r\n})(FoldingRange || (FoldingRange = {}));\r\n/**\r\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\r\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\r\n */\r\nexport var DiagnosticRelatedInformation;\r\n(function (DiagnosticRelatedInformation) {\r\n    /**\r\n     * Creates a new DiagnosticRelatedInformation literal.\r\n     */\r\n    function create(location, message) {\r\n        return {\r\n            location: location,\r\n            message: message\r\n        };\r\n    }\r\n    DiagnosticRelatedInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\r\n    }\r\n    DiagnosticRelatedInformation.is = is;\r\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\r\n/**\r\n * The diagnostic's severity.\r\n */\r\nexport var DiagnosticSeverity;\r\n(function (DiagnosticSeverity) {\r\n    /**\r\n     * Reports an error.\r\n     */\r\n    DiagnosticSeverity.Error = 1;\r\n    /**\r\n     * Reports a warning.\r\n     */\r\n    DiagnosticSeverity.Warning = 2;\r\n    /**\r\n     * Reports an information.\r\n     */\r\n    DiagnosticSeverity.Information = 3;\r\n    /**\r\n     * Reports a hint.\r\n     */\r\n    DiagnosticSeverity.Hint = 4;\r\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\r\n/**\r\n * The Diagnostic namespace provides helper functions to work with\r\n * [Diagnostic](#Diagnostic) literals.\r\n */\r\nexport var Diagnostic;\r\n(function (Diagnostic) {\r\n    /**\r\n     * Creates a new Diagnostic literal.\r\n     */\r\n    function create(range, message, severity, code, source, relatedInformation) {\r\n        var result = { range: range, message: message };\r\n        if (Is.defined(severity)) {\r\n            result.severity = severity;\r\n        }\r\n        if (Is.defined(code)) {\r\n            result.code = code;\r\n        }\r\n        if (Is.defined(source)) {\r\n            result.source = source;\r\n        }\r\n        if (Is.defined(relatedInformation)) {\r\n            result.relatedInformation = relatedInformation;\r\n        }\r\n        return result;\r\n    }\r\n    Diagnostic.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && Range.is(candidate.range)\r\n            && Is.string(candidate.message)\r\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\r\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\r\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\r\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\r\n    }\r\n    Diagnostic.is = is;\r\n})(Diagnostic || (Diagnostic = {}));\r\n/**\r\n * The Command namespace provides helper functions to work with\r\n * [Command](#Command) literals.\r\n */\r\nexport var Command;\r\n(function (Command) {\r\n    /**\r\n     * Creates a new Command literal.\r\n     */\r\n    function create(title, command) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { title: title, command: command };\r\n        if (Is.defined(args) && args.length > 0) {\r\n            result.arguments = args;\r\n        }\r\n        return result;\r\n    }\r\n    Command.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\r\n    }\r\n    Command.is = is;\r\n})(Command || (Command = {}));\r\n/**\r\n * The TextEdit namespace provides helper function to create replace,\r\n * insert and delete edits more easily.\r\n */\r\nexport var TextEdit;\r\n(function (TextEdit) {\r\n    /**\r\n     * Creates a replace text edit.\r\n     * @param range The range of text to be replaced.\r\n     * @param newText The new text.\r\n     */\r\n    function replace(range, newText) {\r\n        return { range: range, newText: newText };\r\n    }\r\n    TextEdit.replace = replace;\r\n    /**\r\n     * Creates a insert text edit.\r\n     * @param position The position to insert the text at.\r\n     * @param newText The text to be inserted.\r\n     */\r\n    function insert(position, newText) {\r\n        return { range: { start: position, end: position }, newText: newText };\r\n    }\r\n    TextEdit.insert = insert;\r\n    /**\r\n     * Creates a delete text edit.\r\n     * @param range The range of text to be deleted.\r\n     */\r\n    function del(range) {\r\n        return { range: range, newText: '' };\r\n    }\r\n    TextEdit.del = del;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate)\r\n            && Is.string(candidate.newText)\r\n            && Range.is(candidate.range);\r\n    }\r\n    TextEdit.is = is;\r\n})(TextEdit || (TextEdit = {}));\r\n/**\r\n * The TextDocumentEdit namespace provides helper function to create\r\n * an edit that manipulates a text document.\r\n */\r\nexport var TextDocumentEdit;\r\n(function (TextDocumentEdit) {\r\n    /**\r\n     * Creates a new `TextDocumentEdit`\r\n     */\r\n    function create(textDocument, edits) {\r\n        return { textDocument: textDocument, edits: edits };\r\n    }\r\n    TextDocumentEdit.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\r\n            && Array.isArray(candidate.edits);\r\n    }\r\n    TextDocumentEdit.is = is;\r\n})(TextDocumentEdit || (TextDocumentEdit = {}));\r\nexport var CreateFile;\r\n(function (CreateFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'create',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    CreateFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    CreateFile.is = is;\r\n})(CreateFile || (CreateFile = {}));\r\nexport var RenameFile;\r\n(function (RenameFile) {\r\n    function create(oldUri, newUri, options) {\r\n        var result = {\r\n            kind: 'rename',\r\n            oldUri: oldUri,\r\n            newUri: newUri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    RenameFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    RenameFile.is = is;\r\n})(RenameFile || (RenameFile = {}));\r\nexport var DeleteFile;\r\n(function (DeleteFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'delete',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    DeleteFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))));\r\n    }\r\n    DeleteFile.is = is;\r\n})(DeleteFile || (DeleteFile = {}));\r\nexport var WorkspaceEdit;\r\n(function (WorkspaceEdit) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\r\n            (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {\r\n                if (Is.string(change.kind)) {\r\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\r\n                }\r\n                else {\r\n                    return TextDocumentEdit.is(change);\r\n                }\r\n            }));\r\n    }\r\n    WorkspaceEdit.is = is;\r\n})(WorkspaceEdit || (WorkspaceEdit = {}));\r\nvar TextEditChangeImpl = /** @class */ (function () {\r\n    function TextEditChangeImpl(edits) {\r\n        this.edits = edits;\r\n    }\r\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\r\n        this.edits.push(TextEdit.insert(position, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\r\n        this.edits.push(TextEdit.replace(range, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.delete = function (range) {\r\n        this.edits.push(TextEdit.del(range));\r\n    };\r\n    TextEditChangeImpl.prototype.add = function (edit) {\r\n        this.edits.push(edit);\r\n    };\r\n    TextEditChangeImpl.prototype.all = function () {\r\n        return this.edits;\r\n    };\r\n    TextEditChangeImpl.prototype.clear = function () {\r\n        this.edits.splice(0, this.edits.length);\r\n    };\r\n    return TextEditChangeImpl;\r\n}());\r\n/**\r\n * A workspace change helps constructing changes to a workspace.\r\n */\r\nvar WorkspaceChange = /** @class */ (function () {\r\n    function WorkspaceChange(workspaceEdit) {\r\n        var _this = this;\r\n        this._textEditChanges = Object.create(null);\r\n        if (workspaceEdit) {\r\n            this._workspaceEdit = workspaceEdit;\r\n            if (workspaceEdit.documentChanges) {\r\n                workspaceEdit.documentChanges.forEach(function (change) {\r\n                    if (TextDocumentEdit.is(change)) {\r\n                        var textEditChange = new TextEditChangeImpl(change.edits);\r\n                        _this._textEditChanges[change.textDocument.uri] = textEditChange;\r\n                    }\r\n                });\r\n            }\r\n            else if (workspaceEdit.changes) {\r\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\r\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\r\n                    _this._textEditChanges[key] = textEditChange;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\r\n        /**\r\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\r\n         * use to be returned from a workspace edit operation like rename.\r\n         */\r\n        get: function () {\r\n            return this._workspaceEdit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\r\n        if (VersionedTextDocumentIdentifier.is(key)) {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    documentChanges: []\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.documentChanges) {\r\n                throw new Error('Workspace edit is not configured for document changes.');\r\n            }\r\n            var textDocument = key;\r\n            var result = this._textEditChanges[textDocument.uri];\r\n            if (!result) {\r\n                var edits = [];\r\n                var textDocumentEdit = {\r\n                    textDocument: textDocument,\r\n                    edits: edits\r\n                };\r\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[textDocument.uri] = result;\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    changes: Object.create(null)\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.changes) {\r\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\r\n            }\r\n            var result = this._textEditChanges[key];\r\n            if (!result) {\r\n                var edits = [];\r\n                this._workspaceEdit.changes[key] = edits;\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[key] = result;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    WorkspaceChange.prototype.createFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(CreateFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(RenameFile.create(oldUri, newUri, options));\r\n    };\r\n    WorkspaceChange.prototype.deleteFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(DeleteFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.checkDocumentChanges = function () {\r\n        if (!this._workspaceEdit || !this._workspaceEdit.documentChanges) {\r\n            throw new Error('Workspace edit is not configured for document changes.');\r\n        }\r\n    };\r\n    return WorkspaceChange;\r\n}());\r\nexport { WorkspaceChange };\r\n/**\r\n * The TextDocumentIdentifier namespace provides helper functions to work with\r\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\r\n */\r\nexport var TextDocumentIdentifier;\r\n(function (TextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new TextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     */\r\n    function create(uri) {\r\n        return { uri: uri };\r\n    }\r\n    TextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri);\r\n    }\r\n    TextDocumentIdentifier.is = is;\r\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\r\n/**\r\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\r\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\r\n */\r\nexport var VersionedTextDocumentIdentifier;\r\n(function (VersionedTextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new VersionedTextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     * @param uri The document's text.\r\n     */\r\n    function create(uri, version) {\r\n        return { uri: uri, version: version };\r\n    }\r\n    VersionedTextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.number(candidate.version));\r\n    }\r\n    VersionedTextDocumentIdentifier.is = is;\r\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\r\n/**\r\n * The TextDocumentItem namespace provides helper functions to work with\r\n * [TextDocumentItem](#TextDocumentItem) literals.\r\n */\r\nexport var TextDocumentItem;\r\n(function (TextDocumentItem) {\r\n    /**\r\n     * Creates a new TextDocumentItem literal.\r\n     * @param uri The document's uri.\r\n     * @param languageId The document's language identifier.\r\n     * @param version The document's version number.\r\n     * @param text The document's text.\r\n     */\r\n    function create(uri, languageId, version, text) {\r\n        return { uri: uri, languageId: languageId, version: version, text: text };\r\n    }\r\n    TextDocumentItem.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\r\n    }\r\n    TextDocumentItem.is = is;\r\n})(TextDocumentItem || (TextDocumentItem = {}));\r\n/**\r\n * Describes the content type that a client supports in various\r\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\r\n *\r\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\r\n * are reserved for internal usage.\r\n */\r\nexport var MarkupKind;\r\n(function (MarkupKind) {\r\n    /**\r\n     * Plain text is supported as a content format\r\n     */\r\n    MarkupKind.PlainText = 'plaintext';\r\n    /**\r\n     * Markdown is supported as a content format\r\n     */\r\n    MarkupKind.Markdown = 'markdown';\r\n})(MarkupKind || (MarkupKind = {}));\r\n(function (MarkupKind) {\r\n    /**\r\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\r\n    }\r\n    MarkupKind.is = is;\r\n})(MarkupKind || (MarkupKind = {}));\r\nexport var MarkupContent;\r\n(function (MarkupContent) {\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\r\n    }\r\n    MarkupContent.is = is;\r\n})(MarkupContent || (MarkupContent = {}));\r\n/**\r\n * The kind of a completion entry.\r\n */\r\nexport var CompletionItemKind;\r\n(function (CompletionItemKind) {\r\n    CompletionItemKind.Text = 1;\r\n    CompletionItemKind.Method = 2;\r\n    CompletionItemKind.Function = 3;\r\n    CompletionItemKind.Constructor = 4;\r\n    CompletionItemKind.Field = 5;\r\n    CompletionItemKind.Variable = 6;\r\n    CompletionItemKind.Class = 7;\r\n    CompletionItemKind.Interface = 8;\r\n    CompletionItemKind.Module = 9;\r\n    CompletionItemKind.Property = 10;\r\n    CompletionItemKind.Unit = 11;\r\n    CompletionItemKind.Value = 12;\r\n    CompletionItemKind.Enum = 13;\r\n    CompletionItemKind.Keyword = 14;\r\n    CompletionItemKind.Snippet = 15;\r\n    CompletionItemKind.Color = 16;\r\n    CompletionItemKind.File = 17;\r\n    CompletionItemKind.Reference = 18;\r\n    CompletionItemKind.Folder = 19;\r\n    CompletionItemKind.EnumMember = 20;\r\n    CompletionItemKind.Constant = 21;\r\n    CompletionItemKind.Struct = 22;\r\n    CompletionItemKind.Event = 23;\r\n    CompletionItemKind.Operator = 24;\r\n    CompletionItemKind.TypeParameter = 25;\r\n})(CompletionItemKind || (CompletionItemKind = {}));\r\n/**\r\n * Defines whether the insert text in a completion item should be interpreted as\r\n * plain text or a snippet.\r\n */\r\nexport var InsertTextFormat;\r\n(function (InsertTextFormat) {\r\n    /**\r\n     * The primary text to be inserted is treated as a plain string.\r\n     */\r\n    InsertTextFormat.PlainText = 1;\r\n    /**\r\n     * The primary text to be inserted is treated as a snippet.\r\n     *\r\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n     * the end of the snippet. Placeholders with equal identifiers are linked,\r\n     * that is typing in one will update others too.\r\n     *\r\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\r\n     */\r\n    InsertTextFormat.Snippet = 2;\r\n})(InsertTextFormat || (InsertTextFormat = {}));\r\n/**\r\n * The CompletionItem namespace provides functions to deal with\r\n * completion items.\r\n */\r\nexport var CompletionItem;\r\n(function (CompletionItem) {\r\n    /**\r\n     * Create a completion item and seed it with a label.\r\n     * @param label The completion item's label\r\n     */\r\n    function create(label) {\r\n        return { label: label };\r\n    }\r\n    CompletionItem.create = create;\r\n})(CompletionItem || (CompletionItem = {}));\r\n/**\r\n * The CompletionList namespace provides functions to deal with\r\n * completion lists.\r\n */\r\nexport var CompletionList;\r\n(function (CompletionList) {\r\n    /**\r\n     * Creates a new completion list.\r\n     *\r\n     * @param items The completion items.\r\n     * @param isIncomplete The list is not complete.\r\n     */\r\n    function create(items, isIncomplete) {\r\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\r\n    }\r\n    CompletionList.create = create;\r\n})(CompletionList || (CompletionList = {}));\r\nexport var MarkedString;\r\n(function (MarkedString) {\r\n    /**\r\n     * Creates a marked string from plain text.\r\n     *\r\n     * @param plainText The plain text.\r\n     */\r\n    function fromPlainText(plainText) {\r\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\r\n    }\r\n    MarkedString.fromPlainText = fromPlainText;\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\r\n    }\r\n    MarkedString.is = is;\r\n})(MarkedString || (MarkedString = {}));\r\nexport var Hover;\r\n(function (Hover) {\r\n    /**\r\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\r\n            MarkedString.is(candidate.contents) ||\r\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\r\n    }\r\n    Hover.is = is;\r\n})(Hover || (Hover = {}));\r\n/**\r\n * The ParameterInformation namespace provides helper functions to work with\r\n * [ParameterInformation](#ParameterInformation) literals.\r\n */\r\nexport var ParameterInformation;\r\n(function (ParameterInformation) {\r\n    /**\r\n     * Creates a new parameter information literal.\r\n     *\r\n     * @param label A label string.\r\n     * @param documentation A doc string.\r\n     */\r\n    function create(label, documentation) {\r\n        return documentation ? { label: label, documentation: documentation } : { label: label };\r\n    }\r\n    ParameterInformation.create = create;\r\n    ;\r\n})(ParameterInformation || (ParameterInformation = {}));\r\n/**\r\n * The SignatureInformation namespace provides helper functions to work with\r\n * [SignatureInformation](#SignatureInformation) literals.\r\n */\r\nexport var SignatureInformation;\r\n(function (SignatureInformation) {\r\n    function create(label, documentation) {\r\n        var parameters = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            parameters[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { label: label };\r\n        if (Is.defined(documentation)) {\r\n            result.documentation = documentation;\r\n        }\r\n        if (Is.defined(parameters)) {\r\n            result.parameters = parameters;\r\n        }\r\n        else {\r\n            result.parameters = [];\r\n        }\r\n        return result;\r\n    }\r\n    SignatureInformation.create = create;\r\n})(SignatureInformation || (SignatureInformation = {}));\r\n/**\r\n * A document highlight kind.\r\n */\r\nexport var DocumentHighlightKind;\r\n(function (DocumentHighlightKind) {\r\n    /**\r\n     * A textual occurrence.\r\n     */\r\n    DocumentHighlightKind.Text = 1;\r\n    /**\r\n     * Read-access of a symbol, like reading a variable.\r\n     */\r\n    DocumentHighlightKind.Read = 2;\r\n    /**\r\n     * Write-access of a symbol, like writing to a variable.\r\n     */\r\n    DocumentHighlightKind.Write = 3;\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\n/**\r\n * DocumentHighlight namespace to provide helper functions to work with\r\n * [DocumentHighlight](#DocumentHighlight) literals.\r\n */\r\nexport var DocumentHighlight;\r\n(function (DocumentHighlight) {\r\n    /**\r\n     * Create a DocumentHighlight object.\r\n     * @param range The range the highlight applies to.\r\n     */\r\n    function create(range, kind) {\r\n        var result = { range: range };\r\n        if (Is.number(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentHighlight.create = create;\r\n})(DocumentHighlight || (DocumentHighlight = {}));\r\n/**\r\n * A symbol kind.\r\n */\r\nexport var SymbolKind;\r\n(function (SymbolKind) {\r\n    SymbolKind.File = 1;\r\n    SymbolKind.Module = 2;\r\n    SymbolKind.Namespace = 3;\r\n    SymbolKind.Package = 4;\r\n    SymbolKind.Class = 5;\r\n    SymbolKind.Method = 6;\r\n    SymbolKind.Property = 7;\r\n    SymbolKind.Field = 8;\r\n    SymbolKind.Constructor = 9;\r\n    SymbolKind.Enum = 10;\r\n    SymbolKind.Interface = 11;\r\n    SymbolKind.Function = 12;\r\n    SymbolKind.Variable = 13;\r\n    SymbolKind.Constant = 14;\r\n    SymbolKind.String = 15;\r\n    SymbolKind.Number = 16;\r\n    SymbolKind.Boolean = 17;\r\n    SymbolKind.Array = 18;\r\n    SymbolKind.Object = 19;\r\n    SymbolKind.Key = 20;\r\n    SymbolKind.Null = 21;\r\n    SymbolKind.EnumMember = 22;\r\n    SymbolKind.Struct = 23;\r\n    SymbolKind.Event = 24;\r\n    SymbolKind.Operator = 25;\r\n    SymbolKind.TypeParameter = 26;\r\n})(SymbolKind || (SymbolKind = {}));\r\nexport var SymbolInformation;\r\n(function (SymbolInformation) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the location of the symbol.\r\n     * @param uri The resource of the location of symbol, defaults to the current document.\r\n     * @param containerName The name of the symbol containing the symbol.\r\n     */\r\n    function create(name, kind, range, uri, containerName) {\r\n        var result = {\r\n            name: name,\r\n            kind: kind,\r\n            location: { uri: uri, range: range }\r\n        };\r\n        if (containerName) {\r\n            result.containerName = containerName;\r\n        }\r\n        return result;\r\n    }\r\n    SymbolInformation.create = create;\r\n})(SymbolInformation || (SymbolInformation = {}));\r\n/**\r\n * Represents programming constructs like variables, classes, interfaces etc.\r\n * that appear in a document. Document symbols can be hierarchical and they\r\n * have two ranges: one that encloses its definition and one that points to\r\n * its most interesting range, e.g. the range of an identifier.\r\n */\r\nvar DocumentSymbol = /** @class */ (function () {\r\n    function DocumentSymbol() {\r\n    }\r\n    return DocumentSymbol;\r\n}());\r\nexport { DocumentSymbol };\r\n(function (DocumentSymbol) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param detail The detail of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the symbol.\r\n     * @param selectionRange The selectionRange of the symbol.\r\n     * @param children Children of the symbol.\r\n     */\r\n    function create(name, detail, kind, range, selectionRange, children) {\r\n        var result = {\r\n            name: name,\r\n            detail: detail,\r\n            kind: kind,\r\n            range: range,\r\n            selectionRange: selectionRange\r\n        };\r\n        if (children !== void 0) {\r\n            result.children = children;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentSymbol.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\r\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\r\n            (candidate.detail === void 0 || Is.string(candidate.detail)) &&\r\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\r\n            (candidate.children === void 0 || Array.isArray(candidate.children));\r\n    }\r\n    DocumentSymbol.is = is;\r\n})(DocumentSymbol || (DocumentSymbol = {}));\r\n/**\r\n * A set of predefined code action kinds\r\n */\r\nexport var CodeActionKind;\r\n(function (CodeActionKind) {\r\n    /**\r\n     * Base kind for quickfix actions: 'quickfix'\r\n     */\r\n    CodeActionKind.QuickFix = 'quickfix';\r\n    /**\r\n     * Base kind for refactoring actions: 'refactor'\r\n     */\r\n    CodeActionKind.Refactor = 'refactor';\r\n    /**\r\n     * Base kind for refactoring extraction actions: 'refactor.extract'\r\n     *\r\n     * Example extract actions:\r\n     *\r\n     * - Extract method\r\n     * - Extract function\r\n     * - Extract variable\r\n     * - Extract interface from class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorExtract = 'refactor.extract';\r\n    /**\r\n     * Base kind for refactoring inline actions: 'refactor.inline'\r\n     *\r\n     * Example inline actions:\r\n     *\r\n     * - Inline function\r\n     * - Inline variable\r\n     * - Inline constant\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorInline = 'refactor.inline';\r\n    /**\r\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\r\n     *\r\n     * Example rewrite actions:\r\n     *\r\n     * - Convert JavaScript function to class\r\n     * - Add or remove parameter\r\n     * - Encapsulate field\r\n     * - Make method static\r\n     * - Move method to base class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\r\n    /**\r\n     * Base kind for source actions: `source`\r\n     *\r\n     * Source code actions apply to the entire file.\r\n     */\r\n    CodeActionKind.Source = 'source';\r\n    /**\r\n     * Base kind for an organize imports source action: `source.organizeImports`\r\n     */\r\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\r\n})(CodeActionKind || (CodeActionKind = {}));\r\n/**\r\n * The CodeActionContext namespace provides helper functions to work with\r\n * [CodeActionContext](#CodeActionContext) literals.\r\n */\r\nexport var CodeActionContext;\r\n(function (CodeActionContext) {\r\n    /**\r\n     * Creates a new CodeActionContext literal.\r\n     */\r\n    function create(diagnostics, only) {\r\n        var result = { diagnostics: diagnostics };\r\n        if (only !== void 0 && only !== null) {\r\n            result.only = only;\r\n        }\r\n        return result;\r\n    }\r\n    CodeActionContext.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\r\n    }\r\n    CodeActionContext.is = is;\r\n})(CodeActionContext || (CodeActionContext = {}));\r\nexport var CodeAction;\r\n(function (CodeAction) {\r\n    function create(title, commandOrEdit, kind) {\r\n        var result = { title: title };\r\n        if (Command.is(commandOrEdit)) {\r\n            result.command = commandOrEdit;\r\n        }\r\n        else {\r\n            result.edit = commandOrEdit;\r\n        }\r\n        if (kind !== void null) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    CodeAction.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && Is.string(candidate.title) &&\r\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\r\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\r\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\r\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\r\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\r\n    }\r\n    CodeAction.is = is;\r\n})(CodeAction || (CodeAction = {}));\r\n/**\r\n * The CodeLens namespace provides helper functions to work with\r\n * [CodeLens](#CodeLens) literals.\r\n */\r\nexport var CodeLens;\r\n(function (CodeLens) {\r\n    /**\r\n     * Creates a new CodeLens literal.\r\n     */\r\n    function create(range, data) {\r\n        var result = { range: range };\r\n        if (Is.defined(data))\r\n            result.data = data;\r\n        return result;\r\n    }\r\n    CodeLens.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\r\n    }\r\n    CodeLens.is = is;\r\n})(CodeLens || (CodeLens = {}));\r\n/**\r\n * The FormattingOptions namespace provides helper functions to work with\r\n * [FormattingOptions](#FormattingOptions) literals.\r\n */\r\nexport var FormattingOptions;\r\n(function (FormattingOptions) {\r\n    /**\r\n     * Creates a new FormattingOptions literal.\r\n     */\r\n    function create(tabSize, insertSpaces) {\r\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\r\n    }\r\n    FormattingOptions.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\r\n    }\r\n    FormattingOptions.is = is;\r\n})(FormattingOptions || (FormattingOptions = {}));\r\n/**\r\n * A document link is a range in a text document that links to an internal or external resource, like another\r\n * text document or a web site.\r\n */\r\nvar DocumentLink = /** @class */ (function () {\r\n    function DocumentLink() {\r\n    }\r\n    return DocumentLink;\r\n}());\r\nexport { DocumentLink };\r\n/**\r\n * The DocumentLink namespace provides helper functions to work with\r\n * [DocumentLink](#DocumentLink) literals.\r\n */\r\n(function (DocumentLink) {\r\n    /**\r\n     * Creates a new DocumentLink literal.\r\n     */\r\n    function create(range, target, data) {\r\n        return { range: range, target: target, data: data };\r\n    }\r\n    DocumentLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\r\n    }\r\n    DocumentLink.is = is;\r\n})(DocumentLink || (DocumentLink = {}));\r\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\r\nexport var TextDocument;\r\n(function (TextDocument) {\r\n    /**\r\n     * Creates a new ITextDocument literal from the given uri and content.\r\n     * @param uri The document's uri.\r\n     * @param languageId  The document's language Id.\r\n     * @param content The document's content.\r\n     */\r\n    function create(uri, languageId, version, content) {\r\n        return new FullTextDocument(uri, languageId, version, content);\r\n    }\r\n    TextDocument.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\r\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\r\n    }\r\n    TextDocument.is = is;\r\n    function applyEdits(document, edits) {\r\n        var text = document.getText();\r\n        var sortedEdits = mergeSort(edits, function (a, b) {\r\n            var diff = a.range.start.line - b.range.start.line;\r\n            if (diff === 0) {\r\n                return a.range.start.character - b.range.start.character;\r\n            }\r\n            return diff;\r\n        });\r\n        var lastModifiedOffset = text.length;\r\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\r\n            var e = sortedEdits[i];\r\n            var startOffset = document.offsetAt(e.range.start);\r\n            var endOffset = document.offsetAt(e.range.end);\r\n            if (endOffset <= lastModifiedOffset) {\r\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\r\n            }\r\n            else {\r\n                throw new Error('Overlapping edit');\r\n            }\r\n            lastModifiedOffset = startOffset;\r\n        }\r\n        return text;\r\n    }\r\n    TextDocument.applyEdits = applyEdits;\r\n    function mergeSort(data, compare) {\r\n        if (data.length <= 1) {\r\n            // sorted\r\n            return data;\r\n        }\r\n        var p = (data.length / 2) | 0;\r\n        var left = data.slice(0, p);\r\n        var right = data.slice(p);\r\n        mergeSort(left, compare);\r\n        mergeSort(right, compare);\r\n        var leftIdx = 0;\r\n        var rightIdx = 0;\r\n        var i = 0;\r\n        while (leftIdx < left.length && rightIdx < right.length) {\r\n            var ret = compare(left[leftIdx], right[rightIdx]);\r\n            if (ret <= 0) {\r\n                // smaller_equal -> take left to preserve order\r\n                data[i++] = left[leftIdx++];\r\n            }\r\n            else {\r\n                // greater -> take right\r\n                data[i++] = right[rightIdx++];\r\n            }\r\n        }\r\n        while (leftIdx < left.length) {\r\n            data[i++] = left[leftIdx++];\r\n        }\r\n        while (rightIdx < right.length) {\r\n            data[i++] = right[rightIdx++];\r\n        }\r\n        return data;\r\n    }\r\n})(TextDocument || (TextDocument = {}));\r\n/**\r\n * Represents reasons why a text document is saved.\r\n */\r\nexport var TextDocumentSaveReason;\r\n(function (TextDocumentSaveReason) {\r\n    /**\r\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\r\n     * or by an API call.\r\n     */\r\n    TextDocumentSaveReason.Manual = 1;\r\n    /**\r\n     * Automatic after a delay.\r\n     */\r\n    TextDocumentSaveReason.AfterDelay = 2;\r\n    /**\r\n     * When the editor lost focus.\r\n     */\r\n    TextDocumentSaveReason.FocusOut = 3;\r\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\r\nvar FullTextDocument = /** @class */ (function () {\r\n    function FullTextDocument(uri, languageId, version, content) {\r\n        this._uri = uri;\r\n        this._languageId = languageId;\r\n        this._version = version;\r\n        this._content = content;\r\n        this._lineOffsets = null;\r\n    }\r\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\r\n        get: function () {\r\n            return this._uri;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\r\n        get: function () {\r\n            return this._languageId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\r\n        get: function () {\r\n            return this._version;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FullTextDocument.prototype.getText = function (range) {\r\n        if (range) {\r\n            var start = this.offsetAt(range.start);\r\n            var end = this.offsetAt(range.end);\r\n            return this._content.substring(start, end);\r\n        }\r\n        return this._content;\r\n    };\r\n    FullTextDocument.prototype.update = function (event, version) {\r\n        this._content = event.text;\r\n        this._version = version;\r\n        this._lineOffsets = null;\r\n    };\r\n    FullTextDocument.prototype.getLineOffsets = function () {\r\n        if (this._lineOffsets === null) {\r\n            var lineOffsets = [];\r\n            var text = this._content;\r\n            var isLineStart = true;\r\n            for (var i = 0; i < text.length; i++) {\r\n                if (isLineStart) {\r\n                    lineOffsets.push(i);\r\n                    isLineStart = false;\r\n                }\r\n                var ch = text.charAt(i);\r\n                isLineStart = (ch === '\\r' || ch === '\\n');\r\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\r\n                    i++;\r\n                }\r\n            }\r\n            if (isLineStart && text.length > 0) {\r\n                lineOffsets.push(text.length);\r\n            }\r\n            this._lineOffsets = lineOffsets;\r\n        }\r\n        return this._lineOffsets;\r\n    };\r\n    FullTextDocument.prototype.positionAt = function (offset) {\r\n        offset = Math.max(Math.min(offset, this._content.length), 0);\r\n        var lineOffsets = this.getLineOffsets();\r\n        var low = 0, high = lineOffsets.length;\r\n        if (high === 0) {\r\n            return Position.create(0, offset);\r\n        }\r\n        while (low < high) {\r\n            var mid = Math.floor((low + high) / 2);\r\n            if (lineOffsets[mid] > offset) {\r\n                high = mid;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        // low is the least x for which the line offset is larger than the current offset\r\n        // or array.length if no line offset is larger than the current offset\r\n        var line = low - 1;\r\n        return Position.create(line, offset - lineOffsets[line]);\r\n    };\r\n    FullTextDocument.prototype.offsetAt = function (position) {\r\n        var lineOffsets = this.getLineOffsets();\r\n        if (position.line >= lineOffsets.length) {\r\n            return this._content.length;\r\n        }\r\n        else if (position.line < 0) {\r\n            return 0;\r\n        }\r\n        var lineOffset = lineOffsets[position.line];\r\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\r\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\r\n    };\r\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\r\n        get: function () {\r\n            return this.getLineOffsets().length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FullTextDocument;\r\n}());\r\nvar Is;\r\n(function (Is) {\r\n    var toString = Object.prototype.toString;\r\n    function defined(value) {\r\n        return typeof value !== 'undefined';\r\n    }\r\n    Is.defined = defined;\r\n    function undefined(value) {\r\n        return typeof value === 'undefined';\r\n    }\r\n    Is.undefined = undefined;\r\n    function boolean(value) {\r\n        return value === true || value === false;\r\n    }\r\n    Is.boolean = boolean;\r\n    function string(value) {\r\n        return toString.call(value) === '[object String]';\r\n    }\r\n    Is.string = string;\r\n    function number(value) {\r\n        return toString.call(value) === '[object Number]';\r\n    }\r\n    Is.number = number;\r\n    function func(value) {\r\n        return toString.call(value) === '[object Function]';\r\n    }\r\n    Is.func = func;\r\n    function objectLiteral(value) {\r\n        // Strictly speaking class instances pass this check as well. Since the LSP\r\n        // doesn't use classes we ignore this for now. If we do we need to add something\r\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\r\n        return value !== null && typeof value === 'object';\r\n    }\r\n    Is.objectLiteral = objectLiteral;\r\n    function typedArray(value, check) {\r\n        return Array.isArray(value) && value.every(check);\r\n    }\r\n    Is.typedArray = typedArray;\r\n})(Is || (Is = {}));\r\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nvar WorkerManager = /** @class */ (function () {\n    function WorkerManager(defaults) {\n        var _this = this;\n        this._defaults = defaults;\n        this._worker = null;\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\n        this._lastUsedTime = 0;\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\n    }\n    WorkerManager.prototype._stopWorker = function () {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    };\n    WorkerManager.prototype.dispose = function () {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    };\n    WorkerManager.prototype._checkIfIdle = function () {\n        if (!this._worker) {\n            return;\n        }\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    };\n    WorkerManager.prototype._getClient = function () {\n        this._lastUsedTime = Date.now();\n        if (!this._client) {\n            this._worker = monaco.editor.createWebWorker({\n                // module that exports the create() method and returns a `JSONWorker` instance\n                moduleId: 'vs/language/json/jsonWorker',\n                label: this._defaults.languageId,\n                // passed in to the create() method\n                createData: {\n                    languageSettings: this._defaults.diagnosticsOptions,\n                    languageId: this._defaults.languageId,\n                    enableSchemaRequest: this._defaults.diagnosticsOptions.enableSchemaRequest\n                }\n            });\n            this._client = this._worker.getProxy();\n        }\n        return this._client;\n    };\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\n        var _this = this;\n        var resources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            resources[_i] = arguments[_i];\n        }\n        var _client;\n        return this._getClient().then(function (client) {\n            _client = client;\n        }).then(function (_) {\n            return _this._worker.withSyncedResources(resources);\n        }).then(function (_) { return _client; });\n    };\n    return WorkerManager;\n}());\nexport { WorkerManager };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar Uri = monaco.Uri;\nvar Range = monaco.Range;\n// --- diagnostics --- ---\nvar DiagnosticsAdapter = /** @class */ (function () {\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\n        var _this = this;\n        this._languageId = _languageId;\n        this._worker = _worker;\n        this._disposables = [];\n        this._listener = Object.create(null);\n        var onModelAdd = function (model) {\n            var modeId = model.getModeId();\n            if (modeId !== _this._languageId) {\n                return;\n            }\n            var handle;\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n                clearTimeout(handle);\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\n            });\n            _this._doValidate(model.uri, modeId);\n        };\n        var onModelRemoved = function (model) {\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\n            var uriStr = model.uri.toString();\n            var listener = _this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete _this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n            onModelRemoved(model);\n            _this._resetSchema(model.uri);\n        }));\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n            _this._resetSchema(event.model.uri);\n        }));\n        this._disposables.push(defaults.onDidChange(function (_) {\n            monaco.editor.getModels().forEach(function (model) {\n                if (model.getModeId() === _this._languageId) {\n                    onModelRemoved(model);\n                    onModelAdd(model);\n                }\n            });\n        }));\n        this._disposables.push({\n            dispose: function () {\n                monaco.editor.getModels().forEach(onModelRemoved);\n                for (var key in _this._listener) {\n                    _this._listener[key].dispose();\n                }\n            }\n        });\n        monaco.editor.getModels().forEach(onModelAdd);\n    }\n    DiagnosticsAdapter.prototype.dispose = function () {\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\n        this._disposables = [];\n    };\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\n        this._worker().then(function (worker) {\n            worker.resetSchema(resource.toString());\n        });\n    };\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\n        this._worker(resource).then(function (worker) {\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\n                var model = monaco.editor.getModel(resource);\n                if (model && model.getModeId() === languageId) {\n                    monaco.editor.setModelMarkers(model, languageId, markers);\n                }\n            });\n        }).then(undefined, function (err) {\n            console.error(err);\n        });\n    };\n    return DiagnosticsAdapter;\n}());\nexport { DiagnosticsAdapter };\nfunction toSeverity(lsSeverity) {\n    switch (lsSeverity) {\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\n        default:\n            return monaco.MarkerSeverity.Info;\n    }\n}\nfunction toDiagnostics(resource, diag) {\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n    return {\n        severity: toSeverity(diag.severity),\n        startLineNumber: diag.range.start.line + 1,\n        startColumn: diag.range.start.character + 1,\n        endLineNumber: diag.range.end.line + 1,\n        endColumn: diag.range.end.character + 1,\n        message: diag.message,\n        code: code,\n        source: diag.source\n    };\n}\n// --- completion ------\nfunction fromPosition(position) {\n    if (!position) {\n        return void 0;\n    }\n    return { character: position.column - 1, line: position.lineNumber - 1 };\n}\nfunction fromRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\n}\nfunction toRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\nfunction toCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\n        case ls.CompletionItemKind.File: return mItemKind.File;\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\n    }\n    return mItemKind.Property;\n}\nfunction fromCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\n        case mItemKind.File: return ls.CompletionItemKind.File;\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\n    }\n    return ls.CompletionItemKind.Property;\n}\nfunction toTextEdit(textEdit) {\n    if (!textEdit) {\n        return void 0;\n    }\n    return {\n        range: toRange(textEdit.range),\n        text: textEdit.newText\n    };\n}\nvar CompletionAdapter = /** @class */ (function () {\n    function CompletionAdapter(_worker) {\n        this._worker = _worker;\n    }\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n        get: function () {\n            return [' ', ':'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, context, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) {\n            return worker.doComplete(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            var wordInfo = model.getWordUntilPosition(position);\n            var wordRange = new Range(position.lineNumber, wordInfo.startColumn, position.lineNumber, wordInfo.endColumn);\n            var items = info.items.map(function (entry) {\n                var item = {\n                    label: entry.label,\n                    insertText: entry.insertText || entry.label,\n                    sortText: entry.sortText,\n                    filterText: entry.filterText,\n                    documentation: entry.documentation,\n                    detail: entry.detail,\n                    range: wordRange,\n                    kind: toCompletionItemKind(entry.kind),\n                };\n                if (entry.textEdit) {\n                    item.range = toRange(entry.textEdit.range);\n                    item.insertText = entry.textEdit.newText;\n                }\n                if (entry.additionalTextEdits) {\n                    item.additionalTextEdits = entry.additionalTextEdits.map(toTextEdit);\n                }\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\n                    item.insertTextRules = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n                }\n                return item;\n            });\n            return {\n                isIncomplete: info.isIncomplete,\n                suggestions: items\n            };\n        });\n    };\n    return CompletionAdapter;\n}());\nexport { CompletionAdapter };\nfunction isMarkupContent(thing) {\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\nfunction toMarkdownString(entry) {\n    if (typeof entry === 'string') {\n        return {\n            value: entry\n        };\n    }\n    if (isMarkupContent(entry)) {\n        if (entry.kind === 'plaintext') {\n            return {\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n            };\n        }\n        return {\n            value: entry.value\n        };\n    }\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\n}\nfunction toMarkedStringArray(contents) {\n    if (!contents) {\n        return void 0;\n    }\n    if (Array.isArray(contents)) {\n        return contents.map(toMarkdownString);\n    }\n    return [toMarkdownString(contents)];\n}\n// --- hover ------\nvar HoverAdapter = /** @class */ (function () {\n    function HoverAdapter(_worker) {\n        this._worker = _worker;\n    }\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) {\n            return worker.doHover(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            return {\n                range: toRange(info.range),\n                contents: toMarkedStringArray(info.contents)\n            };\n        });\n    };\n    return HoverAdapter;\n}());\nexport { HoverAdapter };\n// --- definition ------\nfunction toLocation(location) {\n    return {\n        uri: Uri.parse(location.uri),\n        range: toRange(location.range)\n    };\n}\n// --- document symbols ------\nfunction toSymbolKind(kind) {\n    var mKind = monaco.languages.SymbolKind;\n    switch (kind) {\n        case ls.SymbolKind.File: return mKind.Array;\n        case ls.SymbolKind.Module: return mKind.Module;\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\n        case ls.SymbolKind.Package: return mKind.Package;\n        case ls.SymbolKind.Class: return mKind.Class;\n        case ls.SymbolKind.Method: return mKind.Method;\n        case ls.SymbolKind.Property: return mKind.Property;\n        case ls.SymbolKind.Field: return mKind.Field;\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\n        case ls.SymbolKind.Enum: return mKind.Enum;\n        case ls.SymbolKind.Interface: return mKind.Interface;\n        case ls.SymbolKind.Function: return mKind.Function;\n        case ls.SymbolKind.Variable: return mKind.Variable;\n        case ls.SymbolKind.Constant: return mKind.Constant;\n        case ls.SymbolKind.String: return mKind.String;\n        case ls.SymbolKind.Number: return mKind.Number;\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\n        case ls.SymbolKind.Array: return mKind.Array;\n    }\n    return mKind.Function;\n}\nvar DocumentSymbolAdapter = /** @class */ (function () {\n    function DocumentSymbolAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\n            if (!items) {\n                return;\n            }\n            return items.map(function (item) { return ({\n                name: item.name,\n                detail: '',\n                containerName: item.containerName,\n                kind: toSymbolKind(item.kind),\n                range: toRange(item.location.range),\n                selectionRange: toRange(item.location.range)\n            }); });\n        });\n    };\n    return DocumentSymbolAdapter;\n}());\nexport { DocumentSymbolAdapter };\nfunction fromFormattingOptions(options) {\n    return {\n        tabSize: options.tabSize,\n        insertSpaces: options.insertSpaces\n    };\n}\nvar DocumentFormattingEditProvider = /** @class */ (function () {\n    function DocumentFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        });\n    };\n    return DocumentFormattingEditProvider;\n}());\nexport { DocumentFormattingEditProvider };\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\n    function DocumentRangeFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        });\n    };\n    return DocumentRangeFormattingEditProvider;\n}());\nexport { DocumentRangeFormattingEditProvider };\nvar DocumentColorAdapter = /** @class */ (function () {\n    function DocumentColorAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\n            if (!infos) {\n                return;\n            }\n            return infos.map(function (item) { return ({\n                color: item.color,\n                range: toRange(item.range)\n            }); });\n        });\n    };\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\n            if (!presentations) {\n                return;\n            }\n            return presentations.map(function (presentation) {\n                var item = {\n                    label: presentation.label,\n                };\n                if (presentation.textEdit) {\n                    item.textEdit = toTextEdit(presentation.textEdit);\n                }\n                if (presentation.additionalTextEdits) {\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\n                }\n                return item;\n            });\n        });\n    };\n    return DocumentColorAdapter;\n}());\nexport { DocumentColorAdapter };\nvar FoldingRangeAdapter = /** @class */ (function () {\n    function FoldingRangeAdapter(_worker) {\n        this._worker = _worker;\n    }\n    FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) { return worker.provideFoldingRanges(resource.toString(), context); }).then(function (ranges) {\n            if (!ranges) {\n                return;\n            }\n            return ranges.map(function (range) {\n                var result = {\n                    start: range.startLine + 1,\n                    end: range.endLine + 1\n                };\n                if (typeof range.kind !== 'undefined') {\n                    result.kind = toFoldingRangeKind(range.kind);\n                }\n                return result;\n            });\n        });\n    };\n    return FoldingRangeAdapter;\n}());\nexport { FoldingRangeAdapter };\nfunction toFoldingRangeKind(kind) {\n    switch (kind) {\n        case ls.FoldingRangeKind.Comment: return monaco.languages.FoldingRangeKind.Comment;\n        case ls.FoldingRangeKind.Imports: return monaco.languages.FoldingRangeKind.Imports;\n        case ls.FoldingRangeKind.Region: return monaco.languages.FoldingRangeKind.Region;\n    }\n    return void 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as json from './_deps/jsonc-parser/main.js';\nexport function createTokenizationSupport(supportComments) {\n    return {\n        getInitialState: function () { return new JSONState(null, null, false); },\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\n    };\n}\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\nexport var TOKEN_VALUE_NULL = 'keyword.json';\nexport var TOKEN_VALUE_STRING = 'string.value.json';\nexport var TOKEN_VALUE_NUMBER = 'number.json';\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\nvar JSONState = /** @class */ (function () {\n    function JSONState(state, scanError, lastWasColon) {\n        this._state = state;\n        this.scanError = scanError;\n        this.lastWasColon = lastWasColon;\n    }\n    JSONState.prototype.clone = function () {\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\n    };\n    JSONState.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        if (!other || !(other instanceof JSONState)) {\n            return false;\n        }\n        return this.scanError === other.scanError &&\n            this.lastWasColon === other.lastWasColon;\n    };\n    JSONState.prototype.getStateData = function () {\n        return this._state;\n    };\n    JSONState.prototype.setStateData = function (state) {\n        this._state = state;\n    };\n    return JSONState;\n}());\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n    if (offsetDelta === void 0) { offsetDelta = 0; }\n    // handle multiline strings and block comments\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\n    switch (state.scanError) {\n        case 2 /* UnexpectedEndOfString */:\n            line = '\"' + line;\n            numberOfInsertedCharacters = 1;\n            break;\n        case 1 /* UnexpectedEndOfComment */:\n            line = '/*' + line;\n            numberOfInsertedCharacters = 2;\n            break;\n    }\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\n    ret = {\n        tokens: [],\n        endState: state.clone()\n    };\n    while (true) {\n        var offset = offsetDelta + scanner.getPosition(), type = '';\n        kind = scanner.scan();\n        if (kind === 17 /* EOF */) {\n            break;\n        }\n        // Check that the scanner has advanced\n        if (offset === offsetDelta + scanner.getPosition()) {\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n        }\n        // In case we inserted /* or \" character, we need to\n        // adjust the offset of all tokens (except the first)\n        if (adjustOffset) {\n            offset -= numberOfInsertedCharacters;\n        }\n        adjustOffset = numberOfInsertedCharacters > 0;\n        // brackets and type\n        switch (kind) {\n            case 1 /* OpenBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 2 /* CloseBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 3 /* OpenBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 4 /* CloseBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 6 /* ColonToken */:\n                type = TOKEN_DELIM_COLON;\n                lastWasColon = true;\n                break;\n            case 5 /* CommaToken */:\n                type = TOKEN_DELIM_COMMA;\n                lastWasColon = false;\n                break;\n            case 8 /* TrueKeyword */:\n            case 9 /* FalseKeyword */:\n                type = TOKEN_VALUE_BOOLEAN;\n                lastWasColon = false;\n                break;\n            case 7 /* NullKeyword */:\n                type = TOKEN_VALUE_NULL;\n                lastWasColon = false;\n                break;\n            case 10 /* StringLiteral */:\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n                lastWasColon = false;\n                break;\n            case 11 /* NumericLiteral */:\n                type = TOKEN_VALUE_NUMBER;\n                lastWasColon = false;\n                break;\n        }\n        // comments, iff enabled\n        if (comments) {\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                    type = TOKEN_COMMENT_LINE;\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    type = TOKEN_COMMENT_BLOCK;\n                    break;\n            }\n        }\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n        ret.tokens.push({\n            startIndex: offset,\n            scopes: type\n        });\n    }\n    return ret;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { WorkerManager } from './workerManager.js';\nimport * as languageFeatures from './languageFeatures.js';\nimport { createTokenizationSupport } from './tokenization.js';\nexport function setupMode(defaults) {\n    var disposables = [];\n    var client = new WorkerManager(defaults);\n    disposables.push(client);\n    var worker = function () {\n        var uris = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            uris[_i] = arguments[_i];\n        }\n        return client.getLanguageServiceWorker.apply(client, uris);\n    };\n    var languageId = defaults.languageId;\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\n    disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n    disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\n    disposables.push(monaco.languages.registerFoldingRangeProvider(languageId, new languageFeatures.FoldingRangeAdapter(worker)));\n}\nvar richEditConfiguration = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ]\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var safeLength = len - 1; // For lookahead.\n                    var commentClosed = false;\n                    while (pos < safeLength) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: void 0\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: void 0 }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    var path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        var key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        var index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            var obj = Object.create(null);\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return void 0;\n    }\n}\nexport function contains(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    if (contains(node, offset, includeRightBound)) {\n        var children = node.children;\n        if (Array.isArray(children)) {\n            for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                var item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return void 0;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\nexport function printParseErrorCode(code) {\n    switch (code) {\n        case 1 /* InvalidSymbol */: return 'InvalidSymbol';\n        case 2 /* InvalidNumberFormat */: return 'InvalidNumberFormat';\n        case 3 /* PropertyNameExpected */: return 'PropertyNameExpected';\n        case 4 /* ValueExpected */: return 'ValueExpected';\n        case 5 /* ColonExpected */: return 'ColonExpected';\n        case 6 /* CommaExpected */: return 'CommaExpected';\n        case 7 /* CloseBraceExpected */: return 'CloseBraceExpected';\n        case 8 /* CloseBracketExpected */: return 'CloseBracketExpected';\n        case 9 /* EndOfFileExpected */: return 'EndOfFileExpected';\n        case 10 /* InvalidCommentToken */: return 'InvalidCommentToken';\n        case 11 /* UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n        case 12 /* UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n        case 13 /* UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n        case 14 /* InvalidUnicode */: return 'InvalidUnicode';\n        case 15 /* InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n        case 16 /* InvalidCharacter */: return 'InvalidCharacter';\n    }\n    return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map"],"sourceRoot":""}